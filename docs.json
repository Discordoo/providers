{"modules":[{"name":"Providers","classes":[],"interfaces":[{"name":"CacheProvider","description":"Represents a cache provider. Custom caching providers must implement it.\nSome implementations may use remote cache, e.g. Redis, so all the methods are async.\nRepresents a cache provider. Custom caching providers must implement it.\nSome implementations may use remote cache, e.g. Redis, so all the methods are async.","see":["https://github.com/Discordoo/discordoo/blob/develop/src/cache/DefaultCacheProvider.ts"],"deprecated":false,"meta":{"line":29,"file":"CacheProvider.ts","path":"cache"},"props":[{"name":"compatible","description":"This property indicates what the cache provider can work with.\nThis property indicates what the cache provider can work with.","optional":false,"type":[[["'classes'"," | "],["'json'"," | "],["'text'"," | "],["'buffer'"]]]},{"name":"sharedCache","description":"All cache providers must has this property,\nwhich indicates whether the provider uses shared cache between several shards.\nAll cache providers must has this property,\nwhich indicates whether the provider uses shared cache between several shards.","optional":false,"type":[[["boolean"]]]},{"name":"clear","description":"Clear all cache from storage\nClear all cache from storage","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",") => "],["Promise","<"],["boolean",">"]]]},{"name":"count","description":"Execute a provided function once for each cache element and count the number of elements for which the function returned true\nExecute a provided function once for each cache element and count the number of elements for which the function returned true","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["predicate",": ("],["value",": "],["V",", "],["key",": "],["K",", "],["provider",": "],["P",") => "],["boolean"," | "],["Promise","<"],["boolean",">) => "],["Promise","<"],["number",">"]]]},{"name":"counts","description":"Execute a provided functions once for each cache element and count the number of elements for which the functions returned true.\nThe order of responses depends on the order of the passed functions.\nExample:\n```js\ncache.counts('members', '123456789123456789', [ (m) => m.presence.status === 'online', (m) => m.presence.status === 'idle' ])\n// will return [ number, number ]. first number = online members, second = idle members.\n```\nExecute a provided functions once for each cache element and count the number of elements for which the functions returned true.\nThe order of responses depends on the order of the passed functions.\nExample:\n```js\ncache.counts('members', '123456789123456789', [ (m) => m.presence.status === 'online', (m) => m.presence.status === 'idle' ])\n// will return [ number, number ]. first number = online members, second = idle members.\n```","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["predicates",": "],["Array","<("],["value",": "],["V",", "],["key",": "],["K",", "],["provider",": "],["P",") => "],["boolean"," | "],["Promise","<"],["boolean",">>) => "],["Promise","<"],["Array","<"],["number",">>"]]]},{"name":"delete","description":"Delete a key from cache\nDelete a key from cache","optional":false,"type":[[["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["key",": "],["K"," | "],["Array","<"],["K",">) => "],["Promise","<"],["boolean",">"]]]},{"name":"entries","description":"Extract keys and values from storage\nExtract keys and values from storage","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",") => "],["Promise","<"],["Array","<["],["K",", "],["V","]>>"]]]},{"name":"filter","description":"Execute a provided function once for each cache element and then make array of elements that the function returned true for\nExecute a provided function once for each cache element and then make array of elements that the function returned true for","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["predicate",": ("],["value",": "],["V",", "],["key",": "],["K",", "],["provider",": "],["P",") => "],["boolean"," | "],["Promise","<"],["boolean",">) => "],["Promise","<"],["Array","<["],["K",", "],["V","]>>"]]]},{"name":"find","description":"Execute a provided function once for each cache element and return element that the function returned true for\nExecute a provided function once for each cache element and return element that the function returned true for","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["predicate",": ("],["value",": "],["V",", "],["key",": "],["K",", "],["provider",": "],["P",") => "],["boolean"," | "],["Promise","<"],["boolean",">) => "],["Promise","<"],["undefined"," | "],["V",">"]]]},{"name":"forEach","description":"Execute a provided function once for each cache element\nExecute a provided function once for each cache element","optional":false,"type":[[["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["predicate",": ("],["value",": "],["V",", "],["key",": "],["K",", "],["provider",": "],["P",") => "],["unknown",") => "],["Promise","<"],["void",">"]]]},{"name":"get","description":"Get value from key\nGet value from key","optional":false,"type":[[["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["key",": "],["K",") => "],["Promise","<"],["undefined"," | "],["V",">"]]]},{"name":"has","description":"Check if key exists in cache\nCheck if key exists in cache","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["key",": "],["K",") => "],["Promise","<"],["boolean",">"]]]},{"name":"init","description":"The init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.\nThe init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.","optional":false,"type":[[["(..."],["args",": "],["unknown","[]) => "],["Promise","<"],["unknown",">"]]]},{"name":"keys","description":"Extract keys from storage\nExtract keys from storage","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",") => "],["Promise","<"],["Array","<"],["K",">>"]]]},{"name":"map","description":"Creates a new array populated with the results of calling a provided function on every cache element\nCreates a new array populated with the results of calling a provided function on every cache element","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["predicate",": ("],["value",": "],["V",", "],["key",": "],["K",", "],["provider",": "],["P",") => "],["R"," | "],["Promise","<"],["R",">) => "],["Promise","<"],["Array","<"],["R",">>"]]]},{"name":"set","description":"Set a key to given value\nSet a key to given value","optional":false,"type":[[["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["key",": "],["K",", "],["value",": "],["V",") => "],["Promise","<"],["CacheProvider",">"]]]},{"name":"size","description":"Get size of cache in storage\nGet size of cache in storage","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",") => "],["Promise","<"],["number",">"]]]},{"name":"sweep","description":"Execute a provided function once for each cache element and then delete the elements that the function returned true for\nExecute a provided function once for each cache element and then delete the elements that the function returned true for","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",", "],["predicate",": ("],["value",": "],["V",", "],["key",": "],["K",", "],["provider",": "],["P",") => "],["boolean"," | "],["Promise","<"],["boolean",">) => "],["Promise","<"],["void",">"]]]},{"name":"values","description":"Extract values from storage\nExtract values from storage","optional":true,"type":[[["undefined"," | "],["("],["keyspace",": "],["string",", "],["storage",": "],["string",") => "],["Promise","<"],["Array","<"],["V",">>"]]]}]},{"name":"GatewayBotInfo","description":"https://discord.com/developers/docs/topics/gateway#get-gateway-bot\nhttps://discord.com/developers/docs/topics/gateway#get-gateway-bot","meta":{"line":7,"file":"GatewayBotInfo.ts","path":"gateway"},"props":[{"name":"session_start_limit","description":"Information on the current session start limit\nInformation on the current session start limit","optional":false,"type":[[["{"],["\nmax_concurrency",": "],["number",","],["\nremaining",": "],["number",","],["\nreset_after",": "],["number",","],["\ntotal",": "],["number\n","}"]]]},{"name":"shards","description":"The recommended number of shards to use when connecting\nThe recommended number of shards to use when connecting","optional":false,"type":[[["number"]]]},{"name":"url","description":"The WSS URL that can be used for connecting to the gateway\nThe WSS URL that can be used for connecting to the gateway","optional":false,"type":[[["string"]]]}]},{"name":"GatewayProvider","description":"Represents a gateway provider. Custom gateway providers must implement it.\nRepresents a gateway provider. Custom gateway providers must implement it.","see":["https://github.com/Discordoo/discordoo/blob/develop/src/gateway/DefaultGatewayProvider.ts"],"deprecated":false,"meta":{"line":34,"file":"GatewayProvider.ts","path":"gateway"},"props":[{"name":"connect","description":"Connect to discord's gateway\nConnect to discord's gateway","optional":false,"type":[[["("],["shards",": "],["GatewayShardsInfo",") => "],["Promise","<"],["unknown",">"]]]},{"name":"disconnect","description":"Disconnect from gateway\nDisconnect from gateway","optional":false,"type":[[["("],["shards",": "],["Array","<"],["number",">) => "],["Promise","<"],["unknown",">"]]]},{"name":"emit","description":"Emit event to the gateway manager or remote host (e.g. rabbitmq), but not to the client directly\nEmit event to the gateway manager or remote host (e.g. rabbitmq), but not to the client directly","optional":false,"type":[[["("],["shardId",": "],["number",", "],["event",": "],["string",", "],["data",": "],["Array","<"],["any",">) => "],["unknown"]]]},{"name":"getGateway","description":"Get gateway bot information\nGet gateway bot information","optional":false,"type":[[["(..."],["args",": "],["unknown","[]) => "],["Promise","<"],["GatewayBotInfo",">"]]]},{"name":"init","description":"The init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.\nThe init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.","optional":false,"type":[[["(..."],["args",": "],["unknown","[]) => "],["Promise","<"],["unknown",">"]]]},{"name":"ping","description":"Get the network latency of the shards websocket\nGet the network latency of the shards websocket","optional":false,"type":[[["(..."],["args",": "],["unknown","[]) => "],["number"]]]},{"name":"reconnect","description":"Reconnect shard(s)\nReconnect shard(s)","optional":false,"type":[[["("],["shards",": "],["Array","<"],["number",">) => "],["Promise","<"],["unknown",">"]]]},{"name":"reorganizeShards","description":"Disconnect from gateway, then set new shards configuration and connect\nDisconnect from gateway, then set new shards configuration and connect","optional":false,"type":[[["("],["shards",": "],["GatewayShardsInfo",") => "],["Promise","<"],["unknown",">"]]]},{"name":"send","description":"Send some data to the gateway\nSend some data to the gateway","optional":false,"type":[[["("],["data",": "],["GatewaySendPayloadLike",", "],["options",": "],["GatewaySendOptions",") => "],["unknown"]]]},{"name":"waitShardSpawnTurn","description":"Insert the shard in the spawn queue. You can simply use GatewayManager.waitShardSpawnTurn for this (client.internals.gateway)\nInsert the shard in the spawn queue. You can simply use GatewayManager.waitShardSpawnTurn for this (client.internals.gateway)","optional":false,"type":[[["("],["shardId",": "],["number",") => "],["Promise","<"],["unknown",">"]]]}]},{"name":"GatewaySendOptions","description":"GatewayProvider.send() options\nGatewayProvider.send() options","meta":{"line":2,"file":"GatewaySendOptions.ts","path":"gateway"},"props":[{"name":"important","description":"Whether this request is important or not. If yes, it must send this request first.\nWhether this request is important or not. If yes, it must send this request first.","optional":true,"type":[[["undefined"," | "],["boolean"]]]},{"name":"shards","description":"Shards to send data to\nShards to send data to","optional":true,"type":[[["undefined"," | "],["Array","<"],["number",">"]]]}]},{"name":"GatewayShardsInfo","description":"If the client uses sharding, information about how many shards to serve is received during the execution of client.start().\nTherefore, gateway needs such an option, it will override the existing settings and use them to connect.\nIf the client uses sharding, information about how many shards to serve is received during the execution of client.start().\nTherefore, gateway needs such an option, it will override the existing settings and use them to connect.","meta":{"line":5,"file":"GatewayShardsInfo.ts","path":"gateway"},"props":[{"name":"shards","description":"Gateway shards ids to serve\nGateway shards ids to serve","optional":false,"type":[[["Array","<"],["number",">"]]]},{"name":"totalShards","description":"The number of shards the client has\nThe number of shards the client has","optional":false,"type":[[["number"]]]}]},{"name":"Provider","description":"Base interface for all providers\nBase interface for all providers","meta":{"line":2,"file":"Provider.ts","path":"."},"props":[{"name":"init","description":"The init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.\nThe init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.","optional":false,"type":[[["(..."],["args",": "],["unknown","[]) => "],["Promise","<"],["unknown",">"]]]}]},{"name":"RawAttachment","meta":{"line":1,"file":"RawAttachment.ts","path":"rest"},"props":[{"name":"data","description":"Attachment binary data\nAttachment binary data","optional":false,"type":[[["ArrayBuffer"," | "],["Buffer"]]]},{"name":"name","description":"Attachment filename\nAttachment filename","optional":false,"type":[[["string"]]]}]},{"name":"RestFailedResponse","description":"Rest provider must return this when request execution failed.\nRest provider must return this when request execution failed.","meta":{"line":4,"file":"RestFailedResponse.ts","path":"rest"},"props":[{"name":"headers","description":"Response headers\nResponse headers","optional":false,"type":[[["any"]]]},{"name":"latency","description":"The delay between sending the request and the first bit of the response\nThe delay between sending the request and the first bit of the response","optional":false,"type":[[["number"]]]},{"name":"result","optional":false,"type":[[["any"]]]},{"name":"statusCode","description":"Response status code or -1 to indicate an internal error of the provider\nResponse status code or -1 to indicate an internal error of the provider","optional":false,"type":[[["number"]]]},{"name":"success","description":"Whether request executed successfully or not\nWhether request executed successfully or not","optional":false,"type":[[["false"]]]}]},{"name":"RestProvider","description":"Represents a rest provider. Custom rest providers must implement it.\nRepresents a rest provider. Custom rest providers must implement it.","see":["https://github.com/Discordoo/discordoo/blob/develop/src/rest/DefaultRestProvider.ts"],"deprecated":false,"meta":{"line":15,"file":"RestProvider.ts","path":"rest"},"props":[{"name":"init","description":"The init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.\nThe init() function exists to tell the provider when the client connects to Discord.\nIf the provider started incorrectly, it should throw an error and reject the promise.","optional":false,"type":[[["(..."],["args",": "],["unknown","[]) => "],["Promise","<"],["unknown",">"]]]},{"name":"request","description":"Perform a request\nPerform a request","optional":false,"type":[[["("],["data",": "],["RestRequestData",", "],["options",": "],["RestRequestOptions",") => "],["RestFinishedResponse","<"],["T",">"]]]}]},{"name":"RestRequestData","description":"Data for the rest request\nData for the rest request","meta":{"line":5,"file":"RestRequestData.ts","path":"rest"},"props":[{"name":"attachments","description":"Files to attach (empty array if 0)\nFiles to attach (empty array if 0)","optional":false,"type":[[["Array","<"],["RawAttachment",">"]]]},{"name":"body","description":"Request body\nRequest body","optional":true,"type":[[["undefined"," | "],["Record","<"],["any",", "],["any",">"]]]},{"name":"headers","description":"Request headers\nRequest headers","optional":true,"type":[[["undefined"," | "],["Record","<"],["string",", "],["any",">"]]]},{"name":"method","description":"GET, POST, etc.\nGET, POST, etc.","optional":false,"type":[[["RestRequestMethods"]]]},{"name":"path","description":"Url path: https://www.youtube.com/ **watch?v=g0WmiI2QUw0**\nUrl path: https://www.youtube.com/ **watch?v=g0WmiI2QUw0**","optional":false,"type":[[["string"]]]}]},{"name":"RestRequestOptions","description":"Options for the rest request\nOptions for the rest request","meta":{"line":4,"file":"RestRequestOptions.ts","path":"rest"},"props":[{"name":"auth","description":"Auth to use for this request\nAuth to use for this request","optional":true,"type":[[["undefined"," | "],["AuthLike"]]]},{"name":"reason","description":"Reason for X-Audit-Log-Reason header\nReason for X-Audit-Log-Reason header","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"useAuth","description":"Whether use any auth for request or not\nWhether use any auth for request or not","optional":true,"type":[[["undefined"," | "],["boolean"]]]}]},{"name":"RestResponse","description":"Base for all rest provider responses\nBase for all rest provider responses","meta":{"line":2,"file":"RestResponse.ts","path":"rest"},"props":[{"name":"headers","description":"Response headers\nResponse headers","optional":false,"type":[[["any"]]]},{"name":"latency","description":"The delay between sending the request and the first bit of the response\nThe delay between sending the request and the first bit of the response","optional":false,"type":[[["number"]]]},{"name":"statusCode","description":"Response status code or -1 to indicate an internal error of the provider\nResponse status code or -1 to indicate an internal error of the provider","optional":false,"type":[[["number"]]]},{"name":"success","description":"Whether request executed successfully or not\nWhether request executed successfully or not","optional":false,"type":[[["boolean"]]]}]},{"name":"RestSuccessfulResponse","description":"Rest provider must return this when request executed successfully.\nRest provider must return this when request executed successfully.","meta":{"line":4,"file":"RestSuccessfulResponse.ts","path":"rest"},"props":[{"name":"headers","description":"Response headers\nResponse headers","optional":false,"type":[[["any"]]]},{"name":"latency","description":"The delay between sending the request and the first bit of the response\nThe delay between sending the request and the first bit of the response","optional":false,"type":[[["number"]]]},{"name":"result","description":"Request result (json body)\nRequest result (json body)","optional":false,"type":[[["Body"]]]},{"name":"statusCode","description":"Response status code or -1 to indicate an internal error of the provider\nResponse status code or -1 to indicate an internal error of the provider","optional":false,"type":[[["number"]]]},{"name":"success","description":"Whether request executed successfully or not\nWhether request executed successfully or not","optional":false,"type":[[["true"]]]}]}],"types":[{"name":"AuthLike","type":[[["`"],["Bot"," "],["string","` | `"],["Bearer"," "],["string","`"]]],"meta":{"line":1,"file":"AuthLike.ts","path":"rest"}},{"name":"CacheStorageKey","description":"Cache storages have their own names, called CacheStorageKey.\nThe name \"global\" means that the operation occurs with all cache storages that are located in the specified keyspace.\nCache storages have their own names, called CacheStorageKey.\nThe name \"global\" means that the operation occurs with all cache storages that are located in the specified keyspace.","type":[[["string"," | "],["'global'"]]],"meta":{"line":5,"file":"CacheStorageKey.ts","path":"cache"}},{"name":"GatewaySendPayloadLike","type":[[["{"],["\nd",": "],["any",","],["\nop",": "],["GatewayOpCodes\n","}"]]],"meta":{"line":3,"file":"GatewaySendPayloadLike.ts","path":"gateway"},"props":[{"name":"d","optional":true,"type":[[["undefined"," | "],["any"]]]},{"name":"op","optional":false,"type":[[["GatewayOpCodes"]]]}]},{"name":"RestFinishedResponse","description":"Just type alias because we don't like use ctrl+c and ctrl+v\nJust type alias because we don't like use ctrl+c and ctrl+v","type":[[["Promise","<"],["RestSuccessfulResponse","<"],["T","> | "],["RestFailedResponse",">"]]],"meta":{"line":7,"file":"RestFinishedResponse.ts","path":"rest"}}],"enums":[{"name":"GatewayOpCodes","meta":{"line":1,"file":"GatewayOpCodes.ts","path":"gateway"},"props":[{"name":"DISPATCH","type":[[["0"]]]},{"name":"HEARTBEAT","type":[[["1"]]]},{"name":"HEARTBEAT_ACK","type":[[["11"]]]},{"name":"HELLO","type":[[["10"]]]},{"name":"IDENTIFY","type":[[["2"]]]},{"name":"INVALID_SESSION","type":[[["9"]]]},{"name":"RECONNECT","type":[[["7"]]]},{"name":"REQUEST_GUILD_MEMBERS","type":[[["8"]]]},{"name":"RESUME","type":[[["6"]]]},{"name":"STATUS_UPDATE","type":[[["3"]]]},{"name":"VOICE_GUILD_PING","type":[[["5"]]]},{"name":"VOICE_STATE_UPDATE","type":[[["4"]]]}]},{"name":"RestRequestMethods","meta":{"line":1,"file":"RestRequestMethods.ts","path":"rest"},"props":[{"name":"DELETE","type":[[["\"DELETE\""]]]},{"name":"GET","type":[[["\"GET\""]]]},{"name":"PATCH","type":[[["\"PATCH\""]]]},{"name":"POST","type":[[["\"POST\""]]]},{"name":"PUT","type":[[["\"PUT\""]]]}]}],"functions":[],"variables":[]}],"time":1644234813707,"generator":"@discordoo/tapok 2.0.16"}